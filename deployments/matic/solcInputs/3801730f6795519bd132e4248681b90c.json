{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/TwapOracle.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity 0.8.13;\n\nimport {FixedPoint} from \"./lib/FixedPoint.sol\";\nimport {UniswapV2OracleLibrary} from \"./lib/UniswapV2OracleLibrary.sol\";\nimport {IUniswapV2Pair} from \"./interfaces/IUniswapV2Pair.sol\";\n\ncontract TwapOracle {\n    using FixedPoint for *;\n\n    struct Oracle {\n        address token0;\n        address token1;\n        uint256 price0CumulativeLast;\n        uint256 price1CumulativeLast;\n        uint32 blockTimestampLast;\n        FixedPoint.uq112x112 price0Average;\n        FixedPoint.uq112x112 price1Average;\n    }\n\n    mapping(address => Oracle) public oracleOfPair;\n\n    function createAndUpdateOracle(IUniswapV2Pair _pair) external {\n        Oracle memory oracle = oracleOfPair[address(_pair)];\n        if (oracle.blockTimestampLast == 0) {\n            createOracle(_pair);\n            updateOracle(_pair);\n        } else {\n            updateOracle(_pair);\n        }\n    }\n\n    // note this will always return 0 before update has been called successfully for the first time.\n    function consult(\n        address _pair,\n        address _token,\n        uint256 _amountIn\n    ) external view returns (uint144 amountOut) {\n        Oracle memory oracle = oracleOfPair[_pair];\n        require(oracle.blockTimestampLast != 0, \"TwapOracle: Not found\");\n\n        if (_token == oracle.token0) {\n            amountOut = oracle.price0Average.mul(_amountIn).decode144();\n        } else {\n            require(_token == oracle.token1, \"TwapOracle: Invalid token\");\n            amountOut = oracle.price1Average.mul(_amountIn).decode144();\n        }\n    }\n\n    function createOracle(IUniswapV2Pair _pair) public {\n        require(\n            oracleOfPair[address(_pair)].blockTimestampLast == 0,\n            \"TwapOracle: Already created\"\n        );\n\n        address token0 = _pair.token0();\n        address token1 = _pair.token1();\n\n        uint112 reserve0;\n        uint112 reserve1;\n        (reserve0, reserve1, ) = _pair.getReserves();\n\n        require(reserve0 != 0 && reserve1 != 0, \"TwapOracle: No reserves\");\n\n        (\n            uint256 _price0Cumulative,\n            uint256 _price1Cumulative,\n            uint32 _blockTimestamp\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(_pair);\n\n        oracleOfPair[address(_pair)] = Oracle(\n            token0,\n            token1,\n            _price0Cumulative,\n            _price1Cumulative,\n            _blockTimestamp,\n            FixedPoint.uq112x112(0),\n            FixedPoint.uq112x112(0)\n        );\n    }\n\n    function updateOracle(IUniswapV2Pair _pair) public {\n        Oracle memory oracle = oracleOfPair[address(_pair)];\n        Oracle storage s_oracle = oracleOfPair[address(_pair)];\n\n        (\n            uint256 price0Cumulative,\n            uint256 price1Cumulative,\n            uint32 blockTimestamp\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(_pair);\n        uint32 timeElapsed = blockTimestamp - oracle.blockTimestampLast; // overflow is desired\n\n        if (timeElapsed == 0) {\n            // prevent divided by zero\n            return;\n        }\n\n        // overflow is desired, casting never truncates\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n        s_oracle.price0Average = FixedPoint.uq112x112(\n            uint224(\n                (price0Cumulative - oracle.price0CumulativeLast) / timeElapsed\n            )\n        );\n        s_oracle.price1Average = FixedPoint.uq112x112(\n            uint224(\n                (price1Cumulative - oracle.price1CumulativeLast) / timeElapsed\n            )\n        );\n\n        s_oracle.price0CumulativeLast = price0Cumulative;\n        s_oracle.price1CumulativeLast = price1Cumulative;\n        s_oracle.blockTimestampLast = blockTimestamp;\n    }\n}\n"
    },
    "contracts/lib/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // range: [0, 2**144 - 1]\n    // resolution: 1 / 2**112\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(x) << RESOLUTION);\n    }\n\n    // encodes a uint144 as a UQ144x112\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n        return uq144x112(uint256(x) << RESOLUTION);\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function div(uq112x112 memory self, uint112 x)\n        internal\n        pure\n        returns (uq112x112 memory)\n    {\n        require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112(self._x / uint224(x));\n    }\n\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\n    // reverts on overflow\n    function mul(uq112x112 memory self, uint256 y)\n        internal\n        pure\n        returns (uq144x112 memory)\n    {\n        uint256 z;\n        require(\n            y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x),\n            \"FixedPoint: MULTIPLICATION_OVERFLOW\"\n        );\n        return uq144x112(z);\n    }\n\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n    // equivalent to encode(numerator).div(denominator)\n    function fraction(uint112 numerator, uint112 denominator)\n        internal\n        pure\n        returns (uq112x112 memory)\n    {\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n    }\n\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n        return uint144(self._x >> RESOLUTION);\n    }\n}\n"
    },
    "contracts/lib/UniswapV2OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./FixedPoint.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\n\n// library with helper methods for oracles that are concerned with computing average prices\nlibrary UniswapV2OracleLibrary {\n    using FixedPoint for *;\n\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n    function currentBlockTimestamp() internal view returns (uint32) {\n        return uint32(block.timestamp % 2**32);\n    }\n\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices(IUniswapV2Pair pair)\n        internal\n        view\n        returns (\n            uint256 price0Cumulative,\n            uint256 price1Cumulative,\n            uint32 blockTimestamp\n        )\n    {\n        blockTimestamp = currentBlockTimestamp();\n        price0Cumulative = pair.price0CumulativeLast();\n        price1Cumulative = pair.price1CumulativeLast();\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = pair\n            .getReserves();\n        if (blockTimestampLast != blockTimestamp) {\n            // subtraction overflow is desired\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n            // addition overflow is desired\n            // counterfactual\n            price0Cumulative +=\n                uint256(FixedPoint.fraction(reserve1, reserve0)._x) *\n                timeElapsed;\n            // counterfactual\n            price1Cumulative +=\n                uint256(FixedPoint.fraction(reserve0, reserve1)._x) *\n                timeElapsed;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
